$date
	Fri May 07 21:05:06 2021
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module tb_shift_array $end
$var parameter 32 ! DATA_WIDTH $end
$var parameter 32 " LENGTH $end
$var parameter 32 # PTR_LENGTH $end
$var reg 1 $ clk $end
$var reg 1 % reset_n $end
$var reg 2 & ctrl_code [1:0] $end
$var reg 32 ' data_in [31:0] $end
$var reg 8 ( data_write [7:0] $end
$var wire 1 ) data_read [7] $end
$var wire 1 * data_read [6] $end
$var wire 1 + data_read [5] $end
$var wire 1 , data_read [4] $end
$var wire 1 - data_read [3] $end
$var wire 1 . data_read [2] $end
$var wire 1 / data_read [1] $end
$var wire 1 0 data_read [0] $end
$var wire 1 1 data_out [0] $end
$var wire 1 2 data_out [1] $end
$var wire 1 3 data_out [2] $end
$var wire 1 4 data_out [3] $end
$var wire 1 5 data_out [4] $end
$var wire 1 6 data_out [5] $end
$var wire 1 7 data_out [6] $end
$var wire 1 8 data_out [7] $end
$var wire 1 9 data_out [8] $end
$var wire 1 : data_out [9] $end
$var wire 1 ; data_out [10] $end
$var wire 1 < data_out [11] $end
$var wire 1 = data_out [12] $end
$var wire 1 > data_out [13] $end
$var wire 1 ? data_out [14] $end
$var wire 1 @ data_out [15] $end
$var wire 1 A data_out [16] $end
$var wire 1 B data_out [17] $end
$var wire 1 C data_out [18] $end
$var wire 1 D data_out [19] $end
$var wire 1 E data_out [20] $end
$var wire 1 F data_out [21] $end
$var wire 1 G data_out [22] $end
$var wire 1 H data_out [23] $end
$var wire 1 I data_out [24] $end
$var wire 1 J data_out [25] $end
$var wire 1 K data_out [26] $end
$var wire 1 L data_out [27] $end
$var wire 1 M data_out [28] $end
$var wire 1 N data_out [29] $end
$var wire 1 O data_out [30] $end
$var wire 1 P data_out [31] $end
$var wire 1 Q start $end
$var wire 1 R fifo_full $end
$var wire 1 S fifo_empty $end
$var wire 1 T fifo_threshold $end
$var wire 1 U fifo_overflow $end
$var wire 1 V fifo_underflow $end
$var wire 1 W wptr [2] $end
$var wire 1 X wptr [1] $end
$var wire 1 Y wptr [0] $end
$var wire 1 Z rptr [2] $end
$var wire 1 [ rptr [1] $end
$var wire 1 \ rptr [0] $end
$var wire 1 ] mem [0] $end
$var wire 1 ^ mem [1] $end
$var wire 1 _ mem [2] $end
$var wire 1 ` mem [3] $end
$var wire 1 a mem [4] $end
$var wire 1 b mem [5] $end
$var wire 1 c mem [6] $end
$var wire 1 d mem [7] $end
$var wire 1 e mem [8] $end
$var wire 1 f mem [9] $end
$var wire 1 g mem [10] $end
$var wire 1 h mem [11] $end
$var wire 1 i mem [12] $end
$var wire 1 j mem [13] $end
$var wire 1 k mem [14] $end
$var wire 1 l mem [15] $end
$var wire 1 m mem [16] $end
$var wire 1 n mem [17] $end
$var wire 1 o mem [18] $end
$var wire 1 p mem [19] $end
$var wire 1 q mem [20] $end
$var wire 1 r mem [21] $end
$var wire 1 s mem [22] $end
$var wire 1 t mem [23] $end
$var wire 1 u mem [24] $end
$var wire 1 v mem [25] $end
$var wire 1 w mem [26] $end
$var wire 1 x mem [27] $end
$var wire 1 y mem [28] $end
$var wire 1 z mem [29] $end
$var wire 1 { mem [30] $end
$var wire 1 | mem [31] $end
$var wire 1 } read $end
$var wire 1 ~ write $end
$var wire 1 !! cnt [2] $end
$var wire 1 "! cnt [1] $end
$var wire 1 #! cnt [0] $end
$var integer 32 $! ii $end

$scope module shift_reg1 $end
$var parameter 32 %! DATA_WIDTH $end
$var parameter 32 &! LENGTH $end
$var parameter 32 '! PTR_LENGTH $end
$var parameter 32 (! DELAY $end
$var parameter 32 )! REG_UPLOAD $end
$var parameter 32 *! REG_LOAD $end
$var parameter 32 +! REG_WRITE $end
$var parameter 32 ,! REG_READ $end
$var wire 1 -! clk $end
$var wire 1 .! reset_n $end
$var wire 1 /! ctrl_code [1] $end
$var wire 1 0! ctrl_code [0] $end
$var wire 1 1! data_in [0] $end
$var wire 1 2! data_in [1] $end
$var wire 1 3! data_in [2] $end
$var wire 1 4! data_in [3] $end
$var wire 1 5! data_in [4] $end
$var wire 1 6! data_in [5] $end
$var wire 1 7! data_in [6] $end
$var wire 1 8! data_in [7] $end
$var wire 1 9! data_in [8] $end
$var wire 1 :! data_in [9] $end
$var wire 1 ;! data_in [10] $end
$var wire 1 <! data_in [11] $end
$var wire 1 =! data_in [12] $end
$var wire 1 >! data_in [13] $end
$var wire 1 ?! data_in [14] $end
$var wire 1 @! data_in [15] $end
$var wire 1 A! data_in [16] $end
$var wire 1 B! data_in [17] $end
$var wire 1 C! data_in [18] $end
$var wire 1 D! data_in [19] $end
$var wire 1 E! data_in [20] $end
$var wire 1 F! data_in [21] $end
$var wire 1 G! data_in [22] $end
$var wire 1 H! data_in [23] $end
$var wire 1 I! data_in [24] $end
$var wire 1 J! data_in [25] $end
$var wire 1 K! data_in [26] $end
$var wire 1 L! data_in [27] $end
$var wire 1 M! data_in [28] $end
$var wire 1 N! data_in [29] $end
$var wire 1 O! data_in [30] $end
$var wire 1 P! data_in [31] $end
$var wire 1 Q! data_write [7] $end
$var wire 1 R! data_write [6] $end
$var wire 1 S! data_write [5] $end
$var wire 1 T! data_write [4] $end
$var wire 1 U! data_write [3] $end
$var wire 1 V! data_write [2] $end
$var wire 1 W! data_write [1] $end
$var wire 1 X! data_write [0] $end
$var reg 8 Y! data_read [7:0] $end
$var reg 32 Z! data_out [31:0] $end
$var reg 1 [! start $end
$var wire 1 R fifo_full $end
$var wire 1 S fifo_empty $end
$var wire 1 T fifo_threshold $end
$var wire 1 U fifo_overflow $end
$var wire 1 V fifo_underflow $end
$var wire 1 W wptr [2] $end
$var wire 1 X wptr [1] $end
$var wire 1 Y wptr [0] $end
$var wire 1 Z rptr [2] $end
$var wire 1 [ rptr [1] $end
$var wire 1 \ rptr [0] $end
$var wire 1 ] mem [0] $end
$var wire 1 ^ mem [1] $end
$var wire 1 _ mem [2] $end
$var wire 1 ` mem [3] $end
$var wire 1 a mem [4] $end
$var wire 1 b mem [5] $end
$var wire 1 c mem [6] $end
$var wire 1 d mem [7] $end
$var wire 1 e mem [8] $end
$var wire 1 f mem [9] $end
$var wire 1 g mem [10] $end
$var wire 1 h mem [11] $end
$var wire 1 i mem [12] $end
$var wire 1 j mem [13] $end
$var wire 1 k mem [14] $end
$var wire 1 l mem [15] $end
$var wire 1 m mem [16] $end
$var wire 1 n mem [17] $end
$var wire 1 o mem [18] $end
$var wire 1 p mem [19] $end
$var wire 1 q mem [20] $end
$var wire 1 r mem [21] $end
$var wire 1 s mem [22] $end
$var wire 1 t mem [23] $end
$var wire 1 u mem [24] $end
$var wire 1 v mem [25] $end
$var wire 1 w mem [26] $end
$var wire 1 x mem [27] $end
$var wire 1 y mem [28] $end
$var wire 1 z mem [29] $end
$var wire 1 { mem [30] $end
$var wire 1 | mem [31] $end
$var reg 1 \! read $end
$var reg 1 ]! write $end
$var reg 3 ^! cnt [2:0] $end
$var reg 2 _! prev_code [1:0] $end
$var reg 32 `! prev_data_in [31:0] $end
$var reg 8 a! prev_data_write [7:0] $end
$var reg 32 b! contents [31:0] $end
$var reg 8 c! data_in_fifo [7:0] $end
$var wire 1 d! data_out_fifo [7] $end
$var wire 1 e! data_out_fifo [6] $end
$var wire 1 f! data_out_fifo [5] $end
$var wire 1 g! data_out_fifo [4] $end
$var wire 1 h! data_out_fifo [3] $end
$var wire 1 i! data_out_fifo [2] $end
$var wire 1 j! data_out_fifo [1] $end
$var wire 1 k! data_out_fifo [0] $end
$var integer 32 l! del $end

$scope module u_fifo_mem $end
$var parameter 32 m! DATA_WIDTH $end
$var parameter 32 n! LENGTH $end
$var parameter 32 o! PTR_LENGTH $end
$var wire 1 -! clk $end
$var wire 1 .! reset_n $end
$var wire 1 p! write $end
$var wire 1 q! read $end
$var wire 1 r! data_in [7] $end
$var wire 1 s! data_in [6] $end
$var wire 1 t! data_in [5] $end
$var wire 1 u! data_in [4] $end
$var wire 1 v! data_in [3] $end
$var wire 1 w! data_in [2] $end
$var wire 1 x! data_in [1] $end
$var wire 1 y! data_in [0] $end
$var wire 1 R fifo_full $end
$var wire 1 S fifo_empty $end
$var wire 1 T fifo_threshold $end
$var wire 1 U fifo_overflow $end
$var wire 1 V fifo_underflow $end
$var wire 1 d! data_out [7] $end
$var wire 1 e! data_out [6] $end
$var wire 1 f! data_out [5] $end
$var wire 1 g! data_out [4] $end
$var wire 1 h! data_out [3] $end
$var wire 1 i! data_out [2] $end
$var wire 1 j! data_out [1] $end
$var wire 1 k! data_out [0] $end
$var wire 1 W wptr [2] $end
$var wire 1 X wptr [1] $end
$var wire 1 Y wptr [0] $end
$var wire 1 Z rptr [2] $end
$var wire 1 [ rptr [1] $end
$var wire 1 \ rptr [0] $end
$var wire 1 ] mem [0] $end
$var wire 1 ^ mem [1] $end
$var wire 1 _ mem [2] $end
$var wire 1 ` mem [3] $end
$var wire 1 a mem [4] $end
$var wire 1 b mem [5] $end
$var wire 1 c mem [6] $end
$var wire 1 d mem [7] $end
$var wire 1 e mem [8] $end
$var wire 1 f mem [9] $end
$var wire 1 g mem [10] $end
$var wire 1 h mem [11] $end
$var wire 1 i mem [12] $end
$var wire 1 j mem [13] $end
$var wire 1 k mem [14] $end
$var wire 1 l mem [15] $end
$var wire 1 m mem [16] $end
$var wire 1 n mem [17] $end
$var wire 1 o mem [18] $end
$var wire 1 p mem [19] $end
$var wire 1 q mem [20] $end
$var wire 1 r mem [21] $end
$var wire 1 s mem [22] $end
$var wire 1 t mem [23] $end
$var wire 1 u mem [24] $end
$var wire 1 v mem [25] $end
$var wire 1 w mem [26] $end
$var wire 1 x mem [27] $end
$var wire 1 y mem [28] $end
$var wire 1 z mem [29] $end
$var wire 1 { mem [30] $end
$var wire 1 | mem [31] $end
$var wire 1 z! fifo_write $end
$var wire 1 {! fifo_read $end

$scope module u_write_pointer $end
$var parameter 32 |! PTR_LENGTH $end
$var parameter 32 }! LENGTH $end
$var wire 1 -! clk $end
$var wire 1 .! reset_n $end
$var wire 1 R fifo_full $end
$var wire 1 p! write $end
$var reg 3 ~! wptr [2:0] $end
$var wire 1 z! fifo_write $end
$upscope $end

$scope module u_read_pointer $end
$var parameter 32 !" PTR_LENGTH $end
$var parameter 32 "" LENGTH $end
$var wire 1 -! clk $end
$var wire 1 .! reset_n $end
$var wire 1 S fifo_empty $end
$var wire 1 q! read $end
$var reg 3 #" rptr [2:0] $end
$var wire 1 {! fifo_read $end
$upscope $end

$scope module u_memory_array $end
$var parameter 32 $" DATA_WIDTH $end
$var parameter 32 %" LENGTH $end
$var parameter 32 &" PTR_LENGTH $end
$var wire 1 -! clk $end
$var wire 1 r! data_in [7] $end
$var wire 1 s! data_in [6] $end
$var wire 1 t! data_in [5] $end
$var wire 1 u! data_in [4] $end
$var wire 1 v! data_in [3] $end
$var wire 1 w! data_in [2] $end
$var wire 1 x! data_in [1] $end
$var wire 1 y! data_in [0] $end
$var wire 1 W wptr [2] $end
$var wire 1 X wptr [1] $end
$var wire 1 Y wptr [0] $end
$var wire 1 Z rptr [2] $end
$var wire 1 [ rptr [1] $end
$var wire 1 \ rptr [0] $end
$var wire 1 z! fifo_write $end
$var wire 1 d! data_out [7] $end
$var wire 1 e! data_out [6] $end
$var wire 1 f! data_out [5] $end
$var wire 1 g! data_out [4] $end
$var wire 1 h! data_out [3] $end
$var wire 1 i! data_out [2] $end
$var wire 1 j! data_out [1] $end
$var wire 1 k! data_out [0] $end
$var reg 32 '" mem [31:0] $end
$upscope $end

$scope module u_status_signal $end
$var parameter 32 (" PTR_LENGTH $end
$var parameter 32 )" LENGTH $end
$var wire 1 -! clk $end
$var wire 1 .! reset_n $end
$var wire 1 q! read $end
$var wire 1 p! write $end
$var wire 1 z! fifo_write $end
$var wire 1 {! fifo_read $end
$var wire 1 Z rptr [2] $end
$var wire 1 [ rptr [1] $end
$var wire 1 \ rptr [0] $end
$var wire 1 W wptr [2] $end
$var wire 1 X wptr [1] $end
$var wire 1 Y wptr [0] $end
$var reg 1 *" fifo_full $end
$var reg 1 +" fifo_empty $end
$var reg 1 ," fifo_threshold $end
$var reg 1 -" fifo_overflow $end
$var reg 1 ." fifo_underflow $end
$var wire 1 /" fbit_comp $end
$var wire 1 0" overflow_set $end
$var wire 1 1" underflow_set $end
$var wire 1 2" pointer_equal $end
$var wire 1 3" pointer_result [2] $end
$var wire 1 4" pointer_result [1] $end
$var wire 1 5" pointer_result [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0$
0%
b0 &
bx '
bx (
bx Y!
bx Z!
0[!
0\!
0]!
b11 ^!
b0 _!
bx `!
bx a!
bx b!
bx c!
bx ~!
bx #"
bx '"
x*"
x+"
x,"
x-"
x."
b1000 !
b100 "
b11 #
b1000 %!
b100 &!
b11 '!
b101 (!
b0 )!
b1 *!
b10 +!
b11 ,!
b1000 m!
b100 n!
b11 o!
b11 |!
b100 }!
b11 !"
b100 ""
b1000 $"
b100 %"
b11 &"
b11 ("
b100 )"
b0 l!
bx $!
x0
x/
x.
x-
x,
x+
x*
x)
x1
x2
x3
x4
x5
x6
x7
x8
x9
x:
x;
x<
x=
x>
x?
x@
xA
xB
xC
xD
xE
xF
xG
xH
xI
xJ
xK
xL
xM
xN
xO
xP
0Q
xR
xS
xT
xU
xV
xY
xX
xW
x\
x[
xZ
x]
x^
x_
x`
xa
xb
xc
xd
xe
xf
xg
xh
xi
xj
xk
xl
xm
xn
xo
xp
xq
xr
xs
xt
xu
xv
xw
xx
xy
xz
x{
x|
0}
0~
1#!
1"!
0!!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
0z!
0{!
x/"
00"
01"
x2"
x5"
x4"
x3"
0-!
0.!
00!
0/!
x1!
x2!
x3!
x4!
x5!
x6!
x7!
x8!
x9!
x:!
x;!
x<!
x=!
x>!
x?!
x@!
xA!
xB!
xC!
xD!
xE!
xF!
xG!
xH!
xI!
xJ!
xK!
xL!
xM!
xN!
xO!
xP!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
0p!
0q!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
$end
#10
1$
1-!
b0 ~!
b0 #"
1+"
0-"
0."
b0 c!
1S
0U
0V
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0\
0[
0Z
0Y
0X
0W
0/"
05"
04"
03"
12"
#20
0$
0-!
#30
1$
1-!
#40
0$